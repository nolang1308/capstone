package com.google.mediapipe.examples.handlandmarker



import android.Manifest
import android.annotation.SuppressLint
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.content.pm.PackageManager
import android.graphics.BitmapFactory
import android.net.Uri
import android.os.Build
import android.os.Bundle
import android.provider.Settings
import android.util.Log
import android.widget.Button
import android.widget.GridView
import android.widget.ImageView
import android.widget.Toast
import android.widget.ToggleButton
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import java.io.File

class MainActivity : AppCompatActivity() {



    @SuppressLint("UnspecifiedRegisterReceiverFlag")
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        val startButton = findViewById<Button>(R.id.add_motion_page_btn)
//        val toThirdPageButton = findViewById<Button>(R.id.ThirdPageBtn)
        val toggleButton = findViewById<ToggleButton>(R.id.toggleButton1)


        startButton.setOnClickListener {
            val intent = Intent(this, SecondActivity::class.java)
            startActivity(intent)
        }
//
//        toThirdPageButton.setOnClickListener {
//            val intent = Intent(this, LearningPage::class.java)
//            startActivity(intent)
//        }

        val gridView = findViewById<GridView>(R.id.gridView)

        val itemList = listOf(
            GridItem(R.drawable.add_btn, "#"+"Ï∫°Ï≥ê", "2020.12.12"),
            GridItem(R.drawable.add_btn, "#"+"Ï∫°Ï≥ê", "2020.12.12"),
            GridItem(R.drawable.add_btn, "#"+"Ï∫°Ï≥ê", "2020.12.12"),
            GridItem(R.drawable.add_btn, "#"+"Ï∫°Ï≥ê", "2020.12.12"),
            GridItem(R.drawable.add_btn, "#"+"Ï∫°Ï≥ê", "2020.12.12"),
            GridItem(R.drawable.add_btn, "#"+"Ï∫°Ï≥ê", "2020.12.12"),
            GridItem(R.drawable.add_btn, "#"+"Ï∫°Ï≥ê", "2020.12.12"),

        )

        val adapter = GridAdapter(this, itemList)
        gridView.adapter = adapter

        // Í∂åÌïú ÌôïÏù∏ Î∞è ÏöîÏ≤≠
        checkPermissions()

//        startOverlayButton.setOnClickListener {
//            if (!Settings.canDrawOverlays(this)) {
//                requestOverlayPermission()
//            } else if (!isCameraPermissionGranted()) {
//                requestCameraPermission()
//            } else {
//                startOverlayService()
//            }
//        }
//
//        stopOverlayButton.setOnClickListener {
//            stopOverlayService()
//        }
        toggleButton.setOnClickListener {
            if (toggleButton.isChecked) {
                toggleButton.isChecked = true
                Toast.makeText(this, "on", Toast.LENGTH_SHORT).show()
                if (!Settings.canDrawOverlays(this)) {
                    requestOverlayPermission()
                } else if (!isCameraPermissionGranted()) {
                    requestCameraPermission()
                } else {
                    startOverlayService()
                }
            } else {
                Toast.makeText(this, "off", Toast.LENGTH_SHORT).show()
                stopOverlayService()

            }
        }
    }



    // Í∂åÌïú ÌôïÏù∏ Ìï®Ïàò
    private fun checkPermissions() {
        if (!isCameraPermissionGranted()) {
            requestCameraPermission()
        }

        if (!isExternalStoragePermissionGranted() && Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) {
            requestExternalStoragePermission()
        }
    }

    private fun isCameraPermissionGranted(): Boolean {
        return ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED
    }

    private fun isExternalStoragePermissionGranted(): Boolean {
        return ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED
    }

    private fun requestCameraPermission() {
        ActivityCompat.requestPermissions(this, arrayOf(Manifest.permission.CAMERA), CAMERA_PERMISSION_REQUEST_CODE)
    }

    private fun requestExternalStoragePermission() {
        ActivityCompat.requestPermissions(this, arrayOf(Manifest.permission.WRITE_EXTERNAL_STORAGE), STORAGE_PERMISSION_REQUEST_CODE)
    }

    // Ïò§Î≤ÑÎ†àÏù¥ Í∂åÌïú ÏöîÏ≤≠
    private fun requestOverlayPermission() {
        val intent = Intent(
            Settings.ACTION_MANAGE_OVERLAY_PERMISSION,
            Uri.parse("package:$packageName")
        )
        overlayPermissionLauncher.launch(intent)
    }

    private val overlayPermissionLauncher =
        registerForActivityResult(ActivityResultContracts.StartActivityForResult()) {
            if (Settings.canDrawOverlays(this)) {
                startOverlayService()
            } else {
                Toast.makeText(this, "Ïò§Î≤ÑÎ†àÏù¥ Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§!", Toast.LENGTH_SHORT).show()
            }
        }

    private fun startOverlayService() {
        val serviceIntent = Intent(this, CameraOverlayService::class.java)
        Log.d("MainActivity", "üöÄ startOverlayService() Ìò∏Ï∂úÎê®")
        startService(serviceIntent)
    }

    private fun stopOverlayService() {
        val serviceIntent = Intent(this, CameraOverlayService::class.java)
        stopService(serviceIntent)
    }



    override fun onPause() {
        super.onPause()
        // Ïï±Ïù¥ Î∞±Í∑∏ÎùºÏö¥ÎìúÎ°ú Í∞ÄÍ∏∞ Ï†ÑÏóê ÌïÑÏöîÌïú ÏûëÏóÖÏùÑ ÏàòÌñâÌï† Ïàò ÏûàÏäµÎãàÎã§
    }

    override fun onDestroy() {
        super.onDestroy()

    }

    companion object {
        private const val CAMERA_PERMISSION_REQUEST_CODE = 1001
        private const val STORAGE_PERMISSION_REQUEST_CODE = 1002
    }
}